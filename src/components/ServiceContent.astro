---
import type { CollectionEntry } from 'astro:content';

interface HeroCta {
  href: string;
  label: string;
}

interface HeroContent {
  eyebrow?: string;
  heading?: string;
  description?: string;
  body?: string;
  primaryCta?: HeroCta;
  secondaryCta?: HeroCta;
}

interface ServiceSection {
  id?: string;
  heading?: string;
  kicker?: string;
  intro?: string;
  body?: string;
}

interface ServiceFaqItem {
  question: string;
  answer: string;
}

interface ServiceFaqGroup {
  heading?: string;
  intro?: string;
  items?: ServiceFaqItem[];
}

interface ServiceEntryData {
  title?: string;
  intro?: string;
  hero?: HeroContent;
  sections?: ServiceSection[];
  faqs?: ServiceFaqGroup;
}

interface Props {
  entry: CollectionEntry<'services'>;
}

const { entry } = Astro.props as Props;

const data = entry.data as ServiceEntryData;
const hero = data.hero ?? {};
const heroEyebrow = hero.eyebrow ?? null;
const heroHeading = hero.heading ?? data.title ?? entry.id;
const heroPrimaryCta =
  hero.primaryCta && hero.primaryCta.href && hero.primaryCta.label ? hero.primaryCta : null;
const heroSecondaryCta =
  hero.secondaryCta && hero.secondaryCta.href && hero.secondaryCta.label
    ? hero.secondaryCta
    : null;

const astroMarkdown = (
  Astro as unknown as {
    markdown?: (markdown: string) => Promise<{ html: string }>;
  }
).markdown;

const renderMarkdown = async (value?: string | null) => {
  if (!value) {
    return null;
  }

  if (!astroMarkdown) {
    throw new Error('Astro.markdown is not available in this environment.');
  }

  const { html } = await astroMarkdown(value);
  const trimmed = html.trim();

  return trimmed.length > 0 ? html : null;
};

const heroDescriptionHtml = await renderMarkdown(hero.description ?? data.intro);
const heroBodyHtml = await renderMarkdown(hero.body);

const sections = Array.isArray(data.sections) ? data.sections : [];
const sectionsWithHtml = await Promise.all(
  sections.map(async (section) => ({
    ...section,
    introHtml: await renderMarkdown(section.intro),
    bodyHtml: await renderMarkdown(section.body),
  })),
);

const faqs = data.faqs;
const faqIntroHtml = await renderMarkdown(faqs?.intro);
const faqItems = faqs?.items
  ? await Promise.all(
      faqs.items.map(async (faq) => ({
        ...faq,
        answerHtml: await renderMarkdown(faq.answer),
      })),
    )
  : [];

const { Content } = await entry.render();
---
<section class="hero hero-plain service-hero">
  <div class="hero-container">
    {heroEyebrow ? <p class="service-hero__eyebrow">{heroEyebrow}</p> : null}
    <h1>{heroHeading}</h1>
    {heroDescriptionHtml ? (
      <div class="hero-subtitle" set:html={heroDescriptionHtml} />
    ) : null}
    {heroBodyHtml ? <div class="service-hero__body" set:html={heroBodyHtml} /> : null}
    {heroPrimaryCta || heroSecondaryCta ? (
      <div class="button-group">
        {heroPrimaryCta ? (
          <a class="cta-button" href={heroPrimaryCta.href}>
            {heroPrimaryCta.label}
          </a>
        ) : null}
        {heroSecondaryCta ? (
          <a class="secondary-button" href={heroSecondaryCta.href}>
            {heroSecondaryCta.label}
          </a>
        ) : null}
      </div>
    ) : null}
  </div>
</section>

<section class="service-content" data-entry-id={entry.id}>
  <div class="box-container service-content__grid">
    <article class="service-content__article">
      <Content />
      {sectionsWithHtml.length ? (
        <section class="service-content__sections">
          {sectionsWithHtml.map((section) => (
            <article class="service-content__section" id={section.id ?? undefined}>
              {section.kicker ? <p class="service-content__kicker">{section.kicker}</p> : null}
              {section.heading ? <h2>{section.heading}</h2> : null}
              {section.introHtml ? (
                <div class="service-content__intro" set:html={section.introHtml} />
              ) : null}
              {section.bodyHtml ? (
                <div class="service-content__body" set:html={section.bodyHtml} />
              ) : null}
            </article>
          ))}
        </section>
      ) : null}
      {faqItems.length ? (
        <section class="service-content__faqs">
          <h2>{faqs?.heading ?? 'Service FAQs'}</h2>
          {faqIntroHtml ? (
            <div class="service-content__faq-intro" set:html={faqIntroHtml} />
          ) : null}
          <div class="service-content__faq-items">
            {faqItems.map((faq) => (
              <details>
                <summary>{faq.question}</summary>
                {faq.answerHtml ? (
                  <div class="service-content__faq-answer" set:html={faq.answerHtml} />
                ) : null}
              </details>
            ))}
          </div>
        </section>
      ) : null}
    </article>
  </div>
</section>
