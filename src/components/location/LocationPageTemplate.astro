---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { createLocationSeo } from '../../utils/seo';

interface Cta {
  label: string;
  href: string;
}

interface HeroContent {
  eyebrow?: string;
  heading?: string;
  description: string;
  cta?: Cta;
  secondaryCta?: Cta;
}

interface SellingPoints {
  heading: string;
  points: string[];
}

interface ServiceItem {
  name: string;
  description: string;
}

interface ServicesSection {
  heading: string;
  intro?: string;
  items: ServiceItem[];
}

interface InternalLinkItem {
  label: string;
  href: string;
  description: string;
}

interface InternalLinksSection {
  heading: string;
  description?: string;
  links: InternalLinkItem[];
}

interface TextSection {
  heading: string;
  paragraphs: string[];
}

interface FaqItem {
  question: string;
  answer: string;
}

interface FaqSection {
  heading?: string;
  items: FaqItem[];
}

interface NeighbourhoodsSection {
  heading: string;
  description?: string;
  areas: string[];
}

interface ClosingSection {
  heading: string;
  paragraphs: string[];
  primaryCta: Cta;
  secondaryCta?: Cta;
}

interface Props {
  townName: string;
  county: string;
  postalCode?: string;
  pageTitle: string;
  metaDescription: string;
  canonicalPath: string;
  hero: HeroContent;
  intro: string[];
  sellingPoints?: SellingPoints;
  services: ServicesSection;
  internalLinks: InternalLinksSection;
  localInsights: TextSection;
  additionalInsights?: TextSection[];
  faqs: FaqSection;
  neighbourhoods?: NeighbourhoodsSection;
  closing: ClosingSection;
  mapEmbedUrl?: string;
  mapEmbedTitle?: string;
}

const {
  townName,
  county,
  postalCode,
  pageTitle,
  metaDescription,
  canonicalPath,
  hero,
  intro,
  sellingPoints,
  services,
  internalLinks,
  localInsights,
  additionalInsights = [],
  faqs,
  neighbourhoods,
  closing,
  mapEmbedUrl,
  mapEmbedTitle,
} = Astro.props as Props;

const normalizedPath = canonicalPath.replace(/^\/+/, '').replace(/\/+$/, '');
const canonicalUrl = normalizedPath
  ? `https://www.lembuildingsurveying.co.uk/${normalizedPath}`
  : 'https://www.lembuildingsurveying.co.uk/';
const heroHeading = hero.heading ?? `Home and Building Surveys in ${townName}`;
const heroDescription = hero.description;
const heroEyebrow = hero.eyebrow ?? 'Local RICS Surveyors';
const heroCta = hero.cta ?? { label: 'Request a Quote', href: '/enquiry' };
const heroSecondaryCta = hero.secondaryCta;
const resolvedMapEmbedTitle = mapEmbedTitle ?? `Map of ${townName}, ${county}`;
const computedMapEmbedUrl = mapEmbedUrl ?? `https://www.google.com/maps?q=${encodeURIComponent(
  townName + ', ' + county + ', UK'
)}&output=embed`;

const areaServed = [townName, ...(neighbourhoods?.areas ?? [])];

const normalizedProvidedTitle = pageTitle?.trim() ?? '';
const defaultTitle = `${townName} Surveyors | LEM Building Surveying`;
const fallbackTitle = `${townName} Surveyors | LEM Surveying`;
const minimalTitle = `${townName} Surveyors | LEM`;

const resolveTitle = () => {
  if (normalizedProvidedTitle.length > 0 && normalizedProvidedTitle.length <= 60) {
    return normalizedProvidedTitle;
  }

  const candidate = normalizedProvidedTitle.length > 0 ? normalizedProvidedTitle : defaultTitle;
  if (candidate.length <= 60) {
    return candidate;
  }

  if (normalizedProvidedTitle.length > 0) {
    const compressed = normalizedProvidedTitle.replace('LEM Building Surveying', 'LEM Surveying');
    if (compressed.length <= 60) {
      return compressed;
    }
  }

  if (fallbackTitle.length <= 60) {
    return fallbackTitle;
  }

  if (minimalTitle.length <= 60) {
    return minimalTitle;
  }

  return `${candidate.slice(0, 59).trimEnd()}…`;
};

const resolvedPageTitle = resolveTitle();

const baseSeo = createLocationSeo({
  title: resolvedPageTitle,
  description: metaDescription,
  canonical: canonicalUrl,
  breadcrumbLabel: townName,
  localBusiness: {
    addressLocality: townName,
    addressRegion: county,
    postalCode,
    areaServed,
    description: metaDescription,
  },
});

const faqStructuredData =
  faqs?.items?.length
    ? {
        '@context': 'https://schema.org',
        '@type': 'FAQPage',
        mainEntity: faqs.items.map((faq) => ({
          '@type': 'Question',
          name: faq.question,
          acceptedAnswer: {
            '@type': 'Answer',
            text: faq.answer,
          },
        })),
      }
    : null;

const seo = {
  ...baseSeo,
  title: resolvedPageTitle,
  fullTitle: true,
  structuredData: [
    ...(baseSeo.structuredData ?? []),
    ...(faqStructuredData ? [faqStructuredData] : []),
  ],
};
---
<BaseLayout pageId="location-page" seo={seo}>
  <section class="hero-plain location-hero">
    <div class="hero-container">
      {heroEyebrow ? <p class="location-eyebrow">{heroEyebrow}</p> : null}
      <h1>{heroHeading}</h1>
      <p class="location-hero-description">{heroDescription}</p>
      <div class="button-group">
        <a class="cta-button" href={heroCta.href}>{heroCta.label}</a>
        {heroSecondaryCta ? (
          <a class="secondary-button" href={heroSecondaryCta.href}>{heroSecondaryCta.label}</a>
        ) : null}
      </div>
    </div>
  </section>

  <section class="location-section">
    <div class="box-container location-layout">
      <article class="location-main">
        {intro?.length ? (
          <div class="location-intro">
            {intro.map((paragraph) => (
              <p set:html={paragraph}></p>
            ))}
          </div>
        ) : null}

        {services?.items?.length ? (
          <div class="location-services">
            <h2>{services.heading}</h2>
            {services.intro ? <p set:html={services.intro}></p> : null}
            <ul>
              {services.items.map((service) => (
                <li>
                  <strong>{service.name}:</strong>{' '}
                  <span set:html={service.description}></span>
                </li>
              ))}
            </ul>
          </div>
        ) : null}

        {localInsights?.paragraphs?.length ? (
          <div class="location-insights">
            <h2>{localInsights.heading}</h2>
            {localInsights.paragraphs.map((paragraph) => (
              <p set:html={paragraph}></p>
            ))}
          </div>
        ) : null}

        {additionalInsights?.length
          ? additionalInsights.map((section) => (
              <div class="location-insights">
                <h2>{section.heading}</h2>
                {section.paragraphs.map((paragraph) => (
                  <p set:html={paragraph}></p>
                ))}
              </div>
            ))
          : null}

        {internalLinks?.links?.length ? (
          <div class="location-internal-links">
            <h2>{internalLinks.heading}</h2>
            {internalLinks.description ? <p>{internalLinks.description}</p> : null}
            <ul>
              {internalLinks.links.map((link) => (
                <li>
                  <a href={link.href}>{link.label}</a> — {link.description}
                </li>
              ))}
            </ul>
          </div>
        ) : null}

        {/* Location map */}
        {computedMapEmbedUrl ? (
          <div class="map-block">
            <h2 class="visually-hidden">Map: {townName}</h2>
            <iframe
              class="map-embed"
              src={computedMapEmbedUrl}
              loading="lazy"
              allowfullscreen
              title={resolvedMapEmbedTitle}
              width="100%"
              height="300"
            ></iframe>
            <noscript>
              <p>
                View on{' '}
                <a
                  href={`https://www.google.com/maps/search/${encodeURIComponent(townName + ' ' + county + ' UK')}`}
                >
                  Google Maps
                </a>
                .
              </p>
            </noscript>
          </div>
        ) : null}

        {faqs?.items?.length ? (
          <div class="location-faq">
            <h2>{faqs.heading ?? `${townName} survey FAQs`}</h2>
            <div class="faq-items">
              {faqs.items.map((faq) => (
                <details>
                  <summary>{faq.question}</summary>
                  <p set:html={faq.answer}></p>
                </details>
              ))}
            </div>
          </div>
        ) : null}
      </article>

      <aside class="location-sidebar">
        {sellingPoints?.points?.length ? (
          <div class="location-card">
            <h2>{sellingPoints.heading}</h2>
            <ul>
              {sellingPoints.points.map((point) => (
                <li set:html={point}></li>
              ))}
            </ul>
          </div>
        ) : null}

        {neighbourhoods?.areas?.length ? (
          <div class="location-card">
            <h2>{neighbourhoods.heading}</h2>
            {neighbourhoods.description ? <p set:html={neighbourhoods.description}></p> : null}
            <ul>
              {neighbourhoods.areas.map((area) => (
                <li>{area}</li>
              ))}
            </ul>
          </div>
        ) : null}

        <div class="location-card">
          <h2>Talk to Liam</h2>
          <p>
            Call <a href="tel:07378732037">07378 732037</a> or <a href="/enquiry">request a call back</a> for
            friendly advice.
          </p>
        </div>
      </aside>
    </div>
  </section>

  <section class="location-section">
    <div class="box-container location-cta">
      <h2>{closing.heading}</h2>
      {closing.paragraphs.map((paragraph) => (
        <p set:html={paragraph}></p>
      ))}
      <div class="button-group">
        <a class="cta-button" href={closing.primaryCta.href}>{closing.primaryCta.label}</a>
        {closing.secondaryCta ? (
          <a class="secondary-button" href={closing.secondaryCta.href}>{closing.secondaryCta.label}</a>
        ) : null}
      </div>
    </div>
  </section>
</BaseLayout>
