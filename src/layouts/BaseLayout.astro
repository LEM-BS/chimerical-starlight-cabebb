---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import navScriptUrl from '../scripts/nav.js?url';

const { pageId = '' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <slot name="head" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Merriweather:wght@700&family=Open+Sans:wght@400;600&display=swap"
      rel="stylesheet"
    />
    <script type="application/ld+json" is:inline>
      {
        "@context": "https://schema.org",
        "@type": "LocalBusiness",
        "name": "LEM Building Surveying Ltd",
        "url": "https://www.lembuildingsurveying.co.uk",
        "image": "https://www.lembuildingsurveying.co.uk/logo-sticker.png",
        "logo": "https://www.lembuildingsurveying.co.uk/logo-sticker.png",
        "telephone": "+44 7378 732 037",
        "description": "Professional building surveying services in Deeside, Flintshire, and across North Wales.",
        "address": {
          "@type": "PostalAddress",
          "streetAddress": "Connah's Quay",
          "addressLocality": "Deeside",
          "addressRegion": "Flintshire",
          "addressCountry": "UK"
        },
        "areaServed": [
          "Deeside",
          "Flintshire",
          "Chester",
          "Cheshire",
          "North Wales"
        ]
      }
    </script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
      integrity="sha512-RXf+QSDCUqzlgfO2z3lBU9rxO9xWJ6gU5AFVOIGuKz6ZlnbqybwVu6vZP4ylDkKUTnSR5Fctj/6aydcZ4IB3BQ=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link rel="stylesheet" href="/styles.css" />
    <link rel="icon" type="image/png" href="/logo-sticker.png" />
    <script src="https://web.cmp.usercentrics.eu/modules/autoblocker.js"></script>
    <script
      id="usercentrics-cmp"
      src="https://web.cmp.usercentrics.eu/ui/loader.js"
      data-settings-id="53YNyaAqMpXqyj"
      async
      is:inline
    ></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GXH0EY936M" is:inline></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-GXH0EY936M');
    </script>
  </head>
  <body data-page={pageId}>
    <a class="skip-link" href="#main-content">Skip to main content</a>
    <Header />
    <div id="main-content">
      <slot />
    </div>
    <Footer />
    <script type="module" src={navScriptUrl} is:inline></script>
    <script is:inline>
      (() => {
        const normalisedPath = window.location.pathname.replace(/\/+$/, "");
        if (
          normalisedPath !== "/quote-calculator" &&
          normalisedPath !== "/quote-calculator.html"
        ) {
          return;
        }

        /**
         * Finds the nearest removable ancestor for a breakdown fragment while
         * avoiding removing the entire document body.
         * @param {Element} element
         */
        const findContainer = (element) => {
          const candidates = [
            element.closest("details"),
            element.closest("section"),
            element.closest("article"),
            element.closest("div"),
          ];

          for (const candidate of candidates) {
            if (
              candidate &&
              candidate !== document.body &&
              candidate !== document.documentElement
            ) {
              return candidate;
            }
          }

          return element;
        };

        const selectors = [
          '[data-component*="breakdown" i]',
          '[data-role*="breakdown" i]',
          '[data-testid*="breakdown" i]',
          '[data-test*="breakdown" i]',
          '[id*="breakdown" i]',
          '[class*="breakdown" i]',
        ];

        const removeBreakdown = () => {
          let removed = false;

          selectors.forEach((selector) => {
            document.querySelectorAll(selector).forEach((element) => {
              if (!(element instanceof HTMLElement)) {
                return;
              }

              const target = findContainer(element);
              if (
                target instanceof HTMLElement &&
                target !== document.body &&
                target !== document.documentElement
              ) {
                target.remove();
                removed = true;
              }
            });
          });

          if (!removed) {
            const fallback = Array.from(
              document.querySelectorAll("section, article, div, details"),
            ).find((node) => {
              if (!(node instanceof HTMLElement)) {
                return false;
              }

              const heading = node.querySelector(
                "h2, h3, h4, summary, .section-title",
              );
              return heading
                ? /breakdown/i.test(heading.textContent ?? "")
                : false;
            });

            if (
              fallback instanceof HTMLElement &&
              fallback !== document.body &&
              fallback !== document.documentElement
            ) {
              fallback.remove();
              removed = true;
            }
          }

          return removed;
        };

        const normaliseText = (value) =>
          (value ?? "")
            .toLowerCase()
            .replace(/[^a-z0-9]+/g, " ")
            .trim();

        const matchesTarget = (value, target) => {
          if (!value) {
            return false;
          }

          const normalisedValue = normaliseText(value);
          return normalisedValue === target || normalisedValue.includes(target);
        };

        const containerSelectors = [
          '[data-field-type]',
          '[data-field-id]',
          '[data-role*="field" i]',
          '[class*="field" i]',
          '[class*="question" i]',
          '[class*="row" i]',
          '[class*="column" i]',
          'label',
          'fieldset',
          'li',
          'p',
          'div',
        ];

        const resolveContainer = (start) => {
          if (!(start instanceof HTMLElement)) {
            return null;
          }

          for (const selector of containerSelectors) {
            const candidate = start.closest(selector);
            if (
              candidate instanceof HTMLElement &&
              candidate.tagName !== "FORM" &&
              candidate !== document.body &&
              candidate !== document.documentElement
            ) {
              if (
                (selector === "div" || selector === "p") &&
                !candidate.querySelector("input, select, textarea")
              ) {
                continue;
              }

              return candidate;
            }
          }

          return start;
        };

        const resolveFromLabel = (label) => {
          if (!(label instanceof HTMLElement)) {
            return null;
          }

          const controlSelector = "input, select, textarea";
          const controlId = label.getAttribute("for");

          if (controlId) {
            const control = document.getElementById(controlId);
            if (control instanceof HTMLElement) {
              return resolveContainer(control);
            }
          }

          const nestedControl = label.querySelector(controlSelector);
          if (nestedControl instanceof HTMLElement) {
            return resolveContainer(nestedControl);
          }

          return resolveContainer(label);
        };

        const findFieldByLabel = (labelText) => {
          const target = normaliseText(labelText);
          if (!target) {
            return null;
          }

          const potentialLabels = document.querySelectorAll(
            'label, legend, [data-field-label], [class*="label" i], [class*="question" i], [class*="title" i]'
          );

          for (const node of potentialLabels) {
            if (!(node instanceof HTMLElement)) {
              continue;
            }

            if (matchesTarget(node.textContent, target)) {
              const container = resolveFromLabel(node);
              if (container instanceof HTMLElement) {
                return container;
              }
            }
          }

          const controls = document.querySelectorAll(
            'input, select, textarea'
          );

          for (const control of controls) {
            if (!(control instanceof HTMLElement)) {
              continue;
            }

            const metadata = [
              control.getAttribute("aria-label"),
              control.getAttribute("placeholder"),
              control.getAttribute("name"),
              control.getAttribute("id"),
              control.getAttribute("data-name"),
              control.getAttribute("title"),
            ];

            if (metadata.some((value) => matchesTarget(value, target))) {
              return resolveContainer(control);
            }

            const parentLabel = control.closest("label");
            if (parentLabel && matchesTarget(parentLabel.textContent, target)) {
              return resolveContainer(control);
            }
          }

          return null;
        };

        const reorderQuoteFields = () => {
          const surveyField = findFieldByLabel("Survey or service");
          const propertyField = findFieldByLabel("Property type");
          const postcodeField = findFieldByLabel("Postcode");

          let changed = false;

          if (
            postcodeField instanceof HTMLElement &&
            surveyField instanceof HTMLElement
          ) {
            const next = postcodeField.nextElementSibling;
            if (next !== surveyField) {
              postcodeField.insertAdjacentElement("afterend", surveyField);
              changed = true;
            }
          }

          if (
            surveyField instanceof HTMLElement &&
            propertyField instanceof HTMLElement
          ) {
            const next = surveyField.nextElementSibling;
            if (next !== propertyField) {
              surveyField.insertAdjacentElement("afterend", propertyField);
              changed = true;
            }
          }

          return changed;
        };

        const observer = new MutationObserver(() => {
          removeBreakdown();
          reorderQuoteFields();
        });

        const initialise = () => {
          removeBreakdown();
          reorderQuoteFields();
          observer.observe(document.body, { childList: true, subtree: true });
        };

        if (document.readyState === "loading") {
          document.addEventListener("DOMContentLoaded", initialise, {
            once: true,
          });
        } else {
          initialise();
        }
      })();
    </script>
  </body>
</html>
