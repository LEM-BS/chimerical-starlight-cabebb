---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout>
  <Fragment slot="head">
    <title>Request a Property Survey | Get a Quote | LEM Building Surveying Ltd</title>
        <meta content="Submit your property details to request a free, no-obligation quote for a building survey, damp report, EPC, or floorplan. Serving Deeside, Chester &amp; the North West." name="description">
        <meta content="Request Building Survey Quote, Property Survey Form, RICS Survey Enquiry, Damp Survey Quote, Floorplan Survey Deeside Chester North West" name="keywords">
        <link rel="canonical" href="https://www.lembuildingsurveying.co.uk/enquiry">
        <meta property="og:title" content="Request a Property Survey | Get a Quote | LEM Building Surveying Ltd">
        <meta property="og:description" content="Submit your property details to request a free, no-obligation quote for a building survey, damp report, EPC, or floorplan. Serving Deeside, Chester &amp; the North West.">
        <meta property="og:url" content="https://www.lembuildingsurveying.co.uk/enquiry">
        <meta property="og:image" content="https://www.lembuildingsurveying.co.uk/logo-sticker.png">
        <meta name="twitter:card" content="summary_large_image">
        <meta name="twitter:title" content="Request a Property Survey | Get a Quote | LEM Building Surveying Ltd">
        <meta name="twitter:description" content="Submit your property details to request a free, no-obligation quote for a building survey, damp report, EPC, or floorplan. Serving Deeside, Chester &amp; the North West.">
        <meta name="twitter:url" content="https://www.lembuildingsurveying.co.uk/enquiry">
        <meta name="twitter:image" content="https://www.lembuildingsurveying.co.uk/logo-sticker.png">
        <!-- Preconnect & Google Fonts -->



        <!-- Main stylesheet -->



        <!-- Usercentrics & GA4 -->
  </Fragment>

  <!-- ENQUIRY PAGE --><section class="enquiry-page">
        <div class="box-container">
          <h1>Request a Property Survey</h1>
          <p>
            Complete the form below and Liam will be in touch to confirm details
            or provide a tailored quote—no obligation.
          </p>
          <!-- Formspree: _next ensures redirect after successful send -->
          <form action="https://formspree.io/f/xzzdqqqz" class="enquiry-form" method="POST">
            <input name="_next" type="hidden" value="https://www.lembuildingsurveying.co.uk/thank-you.html">
            <label for="name">Full Name:</label>
            <input id="name" name="name" required="" type="text">

            <label for="email">Email Address:</label>
            <input id="email" name="email" required="" type="email">

            <label for="phone">Phone Number:</label>
            <input id="phone" name="phone" required="" type="tel">

            <label for="contact-method">Preferred Contact Method:</label>
            <select id="contact-method" name="contact-method" required="">
              <option value="">-- Please Select --</option>
              <option value="email">Email</option>
              <option value="phone-call">Phone Call</option>
              <option value="text-message">SMS / Text Message</option>
              <option value="whatsapp">WhatsApp</option>
              <option value="no-preference">No Preference</option>
            </select>

            <label for="survey-type">Survey Type:</label>
            <select id="survey-type" name="survey-type" required="">
              <option value="">-- Please Select --</option>
              <option value="level-1">RICS Level 1 Home Survey</option>
              <option value="level-2">RICS Level 2 Home Survey</option>
              <option value="level-3">RICS Level 3 Home Survey</option>
              <option value="damp">Damp &amp; Timber Report</option>
              <option value="epc">EPC with Floorplan</option>
              <option value="measured">Measured Survey &amp; Floorplan</option>
              <option value="ventilation">Ventilation Assessment</option>
              <option value="unsure">Unsure – Please advise</option>
            </select>

            <label for="address">Property Address:</label>
            <input id="address" name="address" placeholder="123 High Street, Flintshire" type="text">

            <label for="property-value">Estimated Property Value (£):</label>
            <input id="property-value" inputmode="decimal" min="0.01" name="property-value" placeholder="e.g. 250000" step="0.01" type="number">

            <label for="bedrooms">Number of Bedrooms:</label>
            <input id="bedrooms" name="bedrooms" placeholder="e.g. 3" type="number" min="0">

            <label for="details">Additional Notes:</label>
            <textarea id="details" name="details" placeholder="Any known issues, preferred times, or questions." rows="4"></textarea>

            <button class="cta-button" type="submit">Submit Enquiry</button>
          </form>
          <p class="thank-you-note">
            Thank you—we’ll be in touch shortly to help with your survey needs.
          </p>
        </div>
      </section>

      <!-- Additional information and links -->
      <section class="enquiry-info">
        <div class="box-container">
          <h2>Need help choosing?</h2>
          <p>
            Our
            <a href="/rics-home-surveys" class="inline-link">RICS Home Survey guide</a>
            explains the differences between Level 1, Level 2 and Level 3
            surveys. You can also learn about our specialist
            <a href="/damp-mould-surveys" class="inline-link">damp &amp; timber reports</a>,
            <a href="/measured-surveys" class="inline-link">measured surveys</a>,
            <a href="/epc-with-floorplans" class="inline-link">EPC &amp; floorplans</a>
            and
            <a href="/ventilation-assessments" class="inline-link">ventilation assessments</a>.
          </p>
          <p>
            If you’re not sure where to start, take a look at our
            <a href="/services" class="inline-link">services page</a> or read
            our <a href="/faqs" class="inline-link">FAQs</a>.
          </p>
          <p>
            Still have questions? Feel free to call us on
            <a href="tel:07378732037" class="inline-link">07378&nbsp;732&nbsp;037</a>
            or email
            <a href="mailto:enquiries@lembuildingsurveying.co.uk" class="inline-link">
              enquiries@lembuildingsurveying.co.uk</a
            >.
          </p>
        </div>
      </section>

      <script is:inline>
        document.addEventListener("DOMContentLoaded", () => {
          const form = document.querySelector(".enquiry-form");
          if (!form) {
            return;
          }

          const ENQUIRIES_EMAIL = "enquiries@lembuildingsurveying.co.uk";
          const propertyValueInput = form.querySelector("#property-value");
          const surveyTypeSelect = form.querySelector("#survey-type");

          const currencyFormatter = new Intl.NumberFormat("en-GB", {
            style: "currency",
            currency: "GBP",
            maximumFractionDigits: 0,
          });

          const CONTACT_METHOD_LABELS = {
            email: "Email",
            "phone-call": "Phone call",
            "text-message": "SMS / Text Message",
            whatsapp: "WhatsApp",
            "no-preference": "No preference",
          };

          const normalisePropertyValue = () => {
            if (!propertyValueInput) {
              return;
            }

            const rawValue = propertyValueInput.value.trim();
            if (rawValue === "") {
              propertyValueInput.setCustomValidity("");
              return;
            }

            const numericValue = Number(rawValue);
            if (!Number.isFinite(numericValue) || numericValue <= 0) {
              propertyValueInput.setCustomValidity(
                "Please enter a positive number.",
              );
            } else {
              propertyValueInput.setCustomValidity("");
              propertyValueInput.value = rawValue;
            }
          };

          if (propertyValueInput) {
            propertyValueInput.addEventListener("input", normalisePropertyValue);
            propertyValueInput.addEventListener("blur", normalisePropertyValue);
          }

          const buildEstimatePayload = (fields) => {
            const email =
              typeof fields.email === "string" ? fields.email.trim() : "";
            if (!email) {
              return null;
            }

            const name =
              typeof fields.name === "string" && fields.name.trim()
                ? fields.name.trim()
                : undefined;

            let surveyLabel = "";
            if (surveyTypeSelect instanceof HTMLSelectElement) {
              const selectedOption =
                surveyTypeSelect.options[surveyTypeSelect.selectedIndex];
              if (selectedOption) {
                surveyLabel = selectedOption.text.trim();
              }
            }

            if (
              !surveyLabel &&
              typeof fields["survey-type"] === "string" &&
              fields["survey-type"].trim()
            ) {
              surveyLabel = fields["survey-type"].trim();
            }

            const rawPropertyValue =
              typeof fields["property-value"] === "string"
                ? fields["property-value"].trim()
                : "";
            const cleanedPropertyValue = rawPropertyValue.replace(/[,£\s]+/g, "");
            const propertyValueNumber = cleanedPropertyValue
              ? Number.parseFloat(cleanedPropertyValue)
              : Number.NaN;
            const hasPropertyValue =
              Number.isFinite(propertyValueNumber) && propertyValueNumber > 0;
            const formattedPropertyValue = hasPropertyValue
              ? currencyFormatter.format(propertyValueNumber)
              : null;

            let contactMethodLabel = "";
            if (
              typeof fields["contact-method"] === "string" &&
              fields["contact-method"].trim()
            ) {
              const rawContactMethod = fields["contact-method"].trim();
              contactMethodLabel =
                CONTACT_METHOD_LABELS[rawContactMethod] || rawContactMethod;
            }

            const notes = [
              "Fee to be confirmed after our review of your enquiry.",
            ];

            if (contactMethodLabel) {
              notes.push(`Preferred contact method: ${contactMethodLabel}.`);
            }

            if (typeof fields.phone === "string" && fields.phone.trim()) {
              notes.push(`Phone: ${fields.phone.trim()}`);
            }

            if (formattedPropertyValue) {
              notes.push(`Estimated property value: ${formattedPropertyValue}.`);
            }

            if (typeof fields.details === "string" && fields.details.trim()) {
              notes.push(
                `Additional notes from client:\n${fields.details.trim()}`,
              );
            }

            const lineItemDescription = `${
              surveyLabel || "Survey"
            } fee (to be confirmed)`;
            const lineItem = formattedPropertyValue
              ? {
                  description: lineItemDescription,
                  notes: `Based on an estimated property value of ${formattedPropertyValue}.`,
                }
              : { description: lineItemDescription };

            const estimateNotes = notes.join("\n\n");

            return {
              to: email,
              bcc: ENQUIRIES_EMAIL,
              replyTo: ENQUIRIES_EMAIL,
              subject: surveyLabel
                ? `${surveyLabel} enquiry – fee to be confirmed`
                : "Survey enquiry – fee to be confirmed",
              estimate: {
                clientName: name,
                clientEmail: email,
                surveyType: surveyLabel || undefined,
                propertyAddress:
                  typeof fields.address === "string" && fields.address.trim()
                    ? fields.address.trim()
                    : undefined,
                lineItems: [lineItem],
                notes: estimateNotes,
                summary: "Fee to be confirmed after review.",
                turnaround: "We will confirm your fixed fee shortly.",
              },
            };
          };

          const sendEstimateEmail = async (fields) => {
            const payload = buildEstimatePayload(fields);
            if (!payload) {
              return;
            }

            const response = await fetch(
              "/.netlify/functions/send-estimate-email",
              {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
              },
            );

            if (!response.ok) {
              const errorPayload = await response.json().catch(() => null);
              const message =
                (errorPayload &&
                  typeof errorPayload.error === "string" &&
                  errorPayload.error) ||
                "Failed to send estimate email.";
              throw new Error(message);
            }

            return response.json().catch(() => null);
          };

          form.addEventListener("submit", async (e) => {
            e.preventDefault();
            normalisePropertyValue();

            if (!form.checkValidity()) {
              form.reportValidity();
              return;
            }
            const data = new FormData(form);

            if (propertyValueInput) {
              data.set("property-value", propertyValueInput.value.trim());
            }

            const fields = {};
            data.forEach((value, key) => {
              if (typeof value === "string") {
                fields[key] = value.trim();
              } else {
                fields[key] = value;
              }
            });

            let formspreeResponse;
            try {
              formspreeResponse = await fetch("https://formspree.io/f/xzzdqqqz", {
                method: "POST",
                body: data,
                headers: { Accept: "application/json" },
              });
            } catch (error) {
              alert("Sorry, something went wrong. Please email us directly.");
              return;
            }

            if (formspreeResponse.ok) {
              try {
                await sendEstimateEmail(fields);
              } catch (error) {
                console.error("Unable to send estimate email", error);
              }

              if (
                typeof window !== "undefined" &&
                typeof window.gtag === "function"
              ) {
                window.gtag("event", "conversion", {
                  send_to: "AW-XXXXXXXXXX/AbCdEFgHiJk",
                });
              }

              window.location = "/thank-you.html";
            } else {
              alert("Sorry, something went wrong. Please email us directly.");
            }
          });
        });
      </script>
</BaseLayout>
